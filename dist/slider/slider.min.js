/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src sync recursive \\.s[ac]ss$":
/*!*****************************!*\
  !*** ./src sync \.s[ac]ss$ ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./demo/blocks/slider-config/slider-config.scss": "./src/demo/blocks/slider-config/slider-config.scss",
	"./demo/blocks/slider-container/slider-container.scss": "./src/demo/blocks/slider-container/slider-container.scss",
	"./demo/demo.scss": "./src/demo/demo.scss",
	"./styles/_variables.scss": "./src/styles/_variables.scss",
	"./styles/main.scss": "./src/styles/main.scss"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src sync recursive \\.s[ac]ss$";

/***/ }),

/***/ "./src/ObserverAndSubject/Observer.ts":
/*!********************************************!*\
  !*** ./src/ObserverAndSubject/Observer.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Observer = /** @class */ (function () {
    function Observer(subject) {
        subject.subscribe(this);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars,class-methods-use-this
    Observer.prototype.update = function (action) { };
    return Observer;
}());
exports.default = Observer;


/***/ }),

/***/ "./src/ObserverAndSubject/Subject.ts":
/*!*******************************************!*\
  !*** ./src/ObserverAndSubject/Subject.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Subject = /** @class */ (function () {
    function Subject() {
        this.observers = [];
    }
    // Подписывает на обновления
    Subject.prototype.subscribe = function (observer) {
        this.observers.push(observer);
    };
    // Убирает подписку
    Subject.prototype.unsubscribe = function (observer) {
        this.observers.filter(function (obs) { return obs !== observer; });
    };
    // Вызывает у всех подписчиков метод update
    Subject.prototype.notify = function (action) {
        this.observers.forEach(function (observer) {
            observer.update(action);
        });
    };
    return Subject;
}());
exports.default = Subject;


/***/ }),

/***/ "./src/demo/blocks/slider-config/slider-config.scss":
/*!**********************************************************!*\
  !*** ./src/demo/blocks/slider-config/slider-config.scss ***!
  \**********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/demo/blocks/slider-container/slider-container.scss":
/*!****************************************************************!*\
  !*** ./src/demo/blocks/slider-container/slider-container.scss ***!
  \****************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/demo/demo.scss":
/*!****************************!*\
  !*** ./src/demo/demo.scss ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! ./slider */ "./src/slider.ts");
// eslint-disable-next-line no-undef
var importAll = function (requireContext) {
    requireContext.keys().forEach(requireContext);
};
importAll(__webpack_require__("./src sync recursive \\.s[ac]ss$"));


/***/ }),

/***/ "./src/modules/Model/Model.ts":
/*!************************************!*\
  !*** ./src/modules/Model/Model.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = __importDefault(__webpack_require__(/*! ../../ObserverAndSubject/Subject */ "./src/ObserverAndSubject/Subject.ts"));
var Model = /** @class */ (function (_super) {
    __extends(Model, _super);
    function Model(options) {
        var _this = _super.call(this) || this;
        _this.data = {
            min: options.min,
            max: options.max,
            value: options.value,
            isRange: options.isRange,
            stepSize: options.stepSize,
        };
        _this.checkAndFixMinMax();
        _this.checkAndFixValue();
        _this.checkAndFixStepSize();
        return _this;
    }
    // Меняет настройки
    Model.prototype.changeOptions = function (newOptions) {
        if (newOptions.value !== undefined) {
            this.setValue(newOptions.value);
        }
        if (newOptions.isRange !== undefined) {
            this.setIsRange(newOptions.isRange);
        }
        if (newOptions.stepSize !== undefined) {
            this.setStepSize(newOptions.stepSize);
        }
        if (newOptions.min !== undefined) {
            this.setMin(newOptions.min);
        }
        if (newOptions.max !== undefined) {
            this.setMax(newOptions.max);
        }
    };
    // Округляет и возвращает входящее значение
    Model.prototype.roundValue = function (value) {
        var symbolsAfterCommaStepSize = this.getStepSize().toString().includes('.')
            ? this.getStepSize().toString().split('.').pop()
            : null;
        var numOfSymbolsAfterCommaStepSize = symbolsAfterCommaStepSize
            ? symbolsAfterCommaStepSize.length
            : 0;
        if (Array.isArray(value)) {
            return [
                Number(value[0].toFixed(numOfSymbolsAfterCommaStepSize)),
                Number(value[1].toFixed(numOfSymbolsAfterCommaStepSize)),
            ];
        }
        return Number(value.toFixed(numOfSymbolsAfterCommaStepSize));
    };
    // Меняет min
    // Если макс = мин, то ничего не делать.
    Model.prototype.setMin = function (newMin) {
        if (this.data.max === newMin) {
            return this.getMin();
        }
        this.data.min = newMin;
        this.checkAndFixMinMax();
        this.checkAndFixValue();
        this.checkAndFixStepSize();
        this.notify({
            type: 'UPDATE_MIN-MAX',
            updatedProps: {
                min: this.getMin(),
                max: this.getMax(),
                value: this.getValue(),
                stepSize: this.getStepSize(),
            },
        });
        return this.getMin();
    };
    // Меняет max
    // Если макс = мин, то ничего не делать.
    Model.prototype.setMax = function (newMax) {
        if (this.data.min === newMax) {
            return this.getMax();
        }
        this.data.max = newMax;
        this.checkAndFixMinMax();
        this.checkAndFixValue();
        this.checkAndFixStepSize();
        this.notify({
            type: 'UPDATE_MIN-MAX',
            updatedProps: {
                min: this.getMin(),
                max: this.getMax(),
                value: this.getValue(),
                stepSize: this.getStepSize(),
            },
        });
        return this.getMax();
    };
    // Изменяет текущее значение и вызывает checkAndFixValue
    Model.prototype.setValue = function (newValue, shouldRound) {
        if (shouldRound === void 0) { shouldRound = false; }
        this.data.value = shouldRound ? this.roundValue(newValue) : newValue;
        this.checkAndFixValue();
        this.notify({
            type: 'UPDATE_VALUE',
            updatedProps: {
                value: this.getValue(),
            },
        });
        return this.data.value;
    };
    // Меняет isRange и вызывает checkAndFixValue
    Model.prototype.setIsRange = function (newIsRange) {
        this.data.isRange = newIsRange;
        this.checkAndFixValue();
        this.notify({
            type: 'UPDATE_IS-RANGE',
            updatedProps: {
                value: this.getValue(),
                isRange: this.getIsRange(),
            },
        });
        return this.data.isRange;
    };
    // Меняет stepSize и вызывает checkAndFixStepSize
    Model.prototype.setStepSize = function (newStepSize) {
        this.data.stepSize = newStepSize;
        this.checkAndFixStepSize();
        this.notify({
            type: 'UPDATE_STEP-SIZE',
            updatedProps: {
                stepSize: this.getStepSize(),
            },
        });
        return this.data.stepSize;
    };
    // Добавляет указанное количество шагов к нужному значению(если не
    // диапазон или нужно большее значение, то указывать не обязательно)
    Model.prototype.addStepsToValue = function (numOfSteps, valueNumber, shouldRound) {
        var _a;
        if (valueNumber === void 0) { valueNumber = 1; }
        if (shouldRound === void 0) { shouldRound = false; }
        if (typeof this.data.value === 'number') {
            this.data.value += numOfSteps * this.data.stepSize;
        }
        else {
            this.data.value[valueNumber] += numOfSteps * this.data.stepSize;
            if (valueNumber === 1) {
                if (this.data.value[valueNumber] < this.data.value[0]) {
                    this.data.value[valueNumber] = this.data.value[0];
                }
            }
            else {
                if (this.data.value[valueNumber] > this.data.value[1]) {
                    _a = this.data.value, this.data.value[valueNumber] = _a[1];
                }
            }
        }
        if (shouldRound) {
            this.data.value = this.roundValue(this.data.value);
        }
        this.checkAndFixValue();
        this.notify({
            type: 'UPDATE_VALUE',
            updatedProps: {
                value: this.getValue(),
            },
        });
        return this.data.value;
    };
    // Если значение - одно число и это диапазон, то значение становится
    // массивом с двумя одинаковыми значениями.
    // Если значение - массив и это не диапазон, то значением становится
    // первый элемент массива.
    // Если это диапазон и первое значение больше второго, поменять их местами.
    // Если значения больше максимального, то
    // приравнять с максимальным, и наоборот для минимального.
    Model.prototype.checkAndFixValue = function () {
        if (this.data.isRange) {
            if (typeof this.data.value === 'number') {
                this.data.value = [this.data.value, this.data.value];
            }
        }
        else if (Array.isArray(this.data.value)) {
            this.data.value = this.data.value[0];
        }
        if (typeof this.data.value === 'number') {
            if (this.data.value > this.data.max) {
                this.data.value = this.data.max;
            }
            else if (this.data.value < this.data.min) {
                this.data.value = this.data.min;
            }
        }
        else {
            if (this.data.value[0] > this.data.value[1]) {
                this.data.value = [this.data.value[1], this.data.value[0]];
            }
            if (this.data.value[1] > this.data.max) {
                this.data.value[1] = this.data.max;
            }
            else if (this.data.value[1] < this.data.min) {
                this.data.value[1] = this.data.min;
            }
            if (this.data.value[0] < this.data.min) {
                this.data.value[0] = this.data.min;
            }
            else if (this.data.value[0] > this.data.max) {
                this.data.value[0] = this.data.max;
            }
        }
        return this.data.value;
    };
    // Если размер шага < 1, то он равен 1.
    // Если размер шага > наибольшего диапазона значений, то он равняется
    // разнице максимального значения и минимального.
    Model.prototype.checkAndFixStepSize = function () {
        if (this.data.stepSize < 1) {
            this.data.stepSize = 1;
        }
        if (this.data.stepSize > this.data.max - this.data.min) {
            this.data.stepSize = this.data.max - this.data.min;
        }
        return this.data.stepSize;
    };
    // Если макс. значение > мин., то поменять местами.
    Model.prototype.checkAndFixMinMax = function () {
        var _a;
        if (this.data.max < this.data.min) {
            _a = [this.data.min, this.data.max], this.data.max = _a[0], this.data.min = _a[1];
        }
        return [this.data.min, this.data.max];
    };
    Model.prototype.getValue = function () {
        if (typeof this.data.value === 'number') {
            return this.data.value;
        }
        return __spreadArrays(this.data.value);
    };
    Model.prototype.getIsRange = function () {
        return this.data.isRange;
    };
    Model.prototype.getMin = function () {
        return this.data.min;
    };
    Model.prototype.getMax = function () {
        return this.data.max;
    };
    // Возвращает max - min
    Model.prototype.getMaxDiapason = function () {
        return this.data.max - this.data.min;
    };
    Model.prototype.getStepSize = function () {
        return this.data.stepSize;
    };
    return Model;
}(Subject_1.default));
exports.default = Model;


/***/ }),

/***/ "./src/modules/Presenter/Presenter.ts":
/*!********************************************!*\
  !*** ./src/modules/Presenter/Presenter.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Observer_1 = __importDefault(__webpack_require__(/*! ../../ObserverAndSubject/Observer */ "./src/ObserverAndSubject/Observer.ts"));
var Presenter = /** @class */ (function (_super) {
    __extends(Presenter, _super);
    function Presenter(model, view, presenterOptions) {
        var _this = _super.call(this, model) || this;
        _this._model = model;
        _this._view = view;
        _this.onChange = presenterOptions.onChange;
        _this._provideInfoToView();
        _this._view.drawSlider();
        return _this;
    }
    Presenter.prototype.onThumbMove = function (numOfSteps, thumbNumber) {
        if (numOfSteps === void 0) { numOfSteps = 1; }
        if (thumbNumber === void 0) { thumbNumber = 1; }
        this._model.addStepsToValue(numOfSteps, thumbNumber, true);
    };
    // Обновляет view
    Presenter.prototype.update = function (action) {
        this._view.updateModelPropsInSlider(action);
        if (this.onChange) {
            this.onChange();
        }
    };
    // Меняет настройки слайдера
    Presenter.prototype.changeOptions = function (newOptions) {
        // Распределение настроек по модулям
        var modelOptions = ['value', 'isRange', 'stepSize', 'max', 'min'];
        var viewOptions = ['length', 'isVertical', 'isResponsive',
            'hasTooltip', 'hasScale', 'scaleValue', 'hasValueInfo',
            'useKeyboard', 'isScaleClickable'];
        var presenterOptions = ['onChange'];
        var newModelOptions = {};
        modelOptions.forEach(function (prop) {
            if (Object.prototype.hasOwnProperty.call(newOptions, prop)) {
                newModelOptions[prop] = newOptions[prop];
            }
        });
        var newViewOptions = {};
        viewOptions.forEach(function (prop) {
            if (Object.prototype.hasOwnProperty.call(newOptions, prop)) {
                newViewOptions[prop] = newOptions[prop];
            }
        });
        var newPresenterOptions = {};
        presenterOptions.forEach(function (prop) {
            if (Object.prototype.hasOwnProperty.call(newOptions, prop)) {
                newPresenterOptions[prop] = newOptions[prop];
            }
        });
        // Передача новых опций
        if (Object.keys(newModelOptions).length !== 0) {
            this._model.changeOptions(newModelOptions);
        }
        if (Object.keys(newViewOptions).length !== 0) {
            this._view.changeOptions(newViewOptions);
        }
        if (Object.keys(newPresenterOptions).length !== 0) {
            if (newPresenterOptions.onChange) {
                this.onChange = newPresenterOptions.onChange;
            }
        }
    };
    // Передает во View modelProps и Presenter
    Presenter.prototype._provideInfoToView = function () {
        this._view.setModelProps({
            value: this._model.getValue(),
            min: this._model.getMin(),
            max: this._model.getMax(),
            isRange: this._model.getIsRange(),
            stepSize: this._model.getStepSize(),
        });
        this._view.setPresenter(this);
    };
    return Presenter;
}(Observer_1.default));
exports.default = Presenter;


/***/ }),

/***/ "./src/modules/View/modules/SubViews/BarView/BarView.ts":
/*!**************************************************************!*\
  !*** ./src/modules/View/modules/SubViews/BarView/BarView.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BarView = /** @class */ (function () {
    function BarView(target, viewModel) {
        this.target = target;
        this.bar = undefined;
        this.progressBar = undefined;
        this.viewModel = viewModel;
    }
    // Возвращает элемент бара
    BarView.prototype.getBar = function () {
        return this.bar;
    };
    // Возвращает элемент прогресс-бара
    BarView.prototype.getProgressBar = function () {
        return this.progressBar;
    };
    // Возвращает длину бара
    BarView.prototype.getOffsetLength = function () {
        if (this.bar) {
            if (this.viewModel.getIsVertical()) {
                return this.bar.offsetHeight;
            }
            return this.bar.offsetWidth;
        }
        return undefined;
    };
    // Создает и возвращает бар в this.target
    BarView.prototype.createBar = function () {
        var _a;
        var bar = document.createElement('div');
        var barClass = this.viewModel.getClasses().barClass;
        if (Array.isArray(barClass)) {
            (_a = bar.classList).add.apply(_a, barClass);
        }
        else {
            bar.classList.add(barClass);
        }
        bar.style.position = 'relative';
        if (!this.viewModel.getIsVertical()) {
            bar.style.width = this.viewModel.getLength();
        }
        else {
            bar.style.height = this.viewModel.getLength();
        }
        this.target.appendChild(bar);
        this.bar = bar;
        return bar;
    };
    // Создает в баре и возвращает прогресс-бар. Если бар еще не создан, возвращает undefined
    BarView.prototype.createProgressBar = function () {
        var _a;
        if (this.bar) {
            var progressBar = document.createElement('div');
            var progressBarClass = this.viewModel.getClasses().progressBarClass;
            this.bar.appendChild(progressBar);
            if (Array.isArray(progressBarClass)) {
                (_a = progressBar.classList).add.apply(_a, progressBarClass);
            }
            else {
                progressBar.classList.add(progressBarClass);
            }
            progressBar.style.position = 'absolute';
            this.progressBar = progressBar;
            this.updateProgressBar();
            return progressBar;
        }
        return undefined;
    };
    // Обновляет положение и длину прогресс-бара
    BarView.prototype.updateProgressBar = function () {
        if (this.progressBar) {
            var valuePosition = this.viewModel.getValuePosition();
            if (valuePosition !== undefined) {
                this.progressBar.style.width = '';
                this.progressBar.style.left = '';
                this.progressBar.style.height = '';
                this.progressBar.style.top = '';
                var widthOrHeight = 'width';
                var leftOrTop = 'left';
                if (this.viewModel.getIsVertical()) {
                    widthOrHeight = 'height';
                    leftOrTop = 'top';
                }
                if (typeof valuePosition === 'number') {
                    this.progressBar.style[widthOrHeight] = valuePosition + "px";
                    this.progressBar.style[leftOrTop] = '0';
                }
                else {
                    this.progressBar.style[widthOrHeight] = valuePosition[1] - valuePosition[0] + "px";
                    this.progressBar.style[leftOrTop] = valuePosition[0] + "px";
                }
            }
        }
    };
    // Обновляет длину и положение бара
    BarView.prototype.updateBar = function () {
        if (this.bar) {
            if (this.viewModel.getIsVertical()) {
                this.bar.style.height = this.viewModel.getLength();
                this.bar.style.width = '';
            }
            else {
                this.bar.style.width = this.viewModel.getLength();
                this.bar.style.height = '';
            }
        }
    };
    return BarView;
}());
exports.default = BarView;


/***/ }),

/***/ "./src/modules/View/modules/SubViews/ScaleView/ScaleView.ts":
/*!******************************************************************!*\
  !*** ./src/modules/View/modules/SubViews/ScaleView/ScaleView.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var areNumbersDefined_1 = __importDefault(__webpack_require__(/*! ../../../../../utils/areNumbersDefined */ "./src/utils/areNumbersDefined.ts"));
var ScaleView = /** @class */ (function () {
    function ScaleView(target, viewModel, mainView) {
        this.target = target;
        this.viewModel = viewModel;
        this.mainView = mainView;
        this.scale = undefined;
        this._handleStepElemMouseDown = this._handleStepElemMouseDown.bind(this);
    }
    // Создает шкалу значений в зависимости от scaleValue.
    ScaleView.prototype.create = function () {
        var _a;
        var modelProps = this.viewModel.getModelProps();
        if (modelProps) {
            var minAndMax = [modelProps.min, modelProps.max];
            if (areNumbersDefined_1.default(minAndMax)) {
                var length_1 = this.viewModel.getLengthInPx();
                if (length_1) {
                    var scale = document.createElement('div');
                    this.target.appendChild(scale);
                    var scaleClass = this.viewModel.getClasses().scaleClass;
                    if (Array.isArray(scaleClass)) {
                        (_a = scale.classList).add.apply(_a, scaleClass);
                    }
                    else {
                        scale.classList.add(scaleClass);
                    }
                    if (this.viewModel.getIsVertical()) {
                        scale.style.height = length_1 + "px";
                    }
                    else {
                        scale.style.width = length_1 + "px";
                    }
                    var steps = [];
                    var scaleValue = this.viewModel.getScaleValue();
                    if (Array.isArray(scaleValue)) {
                        steps = scaleValue;
                    }
                    else {
                        var maxDiapason = minAndMax[1] - minAndMax[0];
                        for (var i = 0; i < scaleValue; i += 1) {
                            steps.push(Number((minAndMax[0] + ((maxDiapason / (scaleValue - 1)) * i)).toFixed(3)));
                        }
                    }
                    for (var i = 0; i < steps.length; i += 1) {
                        var stepElem = document.createElement('div');
                        var position = (length_1 / (steps.length - 1)) * i;
                        stepElem.innerText = "" + steps[i];
                        stepElem.style.position = 'absolute';
                        scale.appendChild(stepElem);
                        if (this.viewModel.getIsVertical()) {
                            stepElem.style.top = position - stepElem.offsetHeight / 2 + "px";
                        }
                        else {
                            stepElem.style.left = position - stepElem.offsetWidth / 2 + "px";
                        }
                    }
                    this.scale = scale;
                    if (this.viewModel.getIsScaleClickable()) {
                        this.addInteractivity();
                    }
                    return scale;
                }
            }
        }
        return undefined;
    };
    // Удаляет scale
    ScaleView.prototype.remove = function () {
        if (this.scale) {
            this.scale.remove();
            this.scale = undefined;
        }
    };
    // Обновляет положение элементов шкалы значений
    ScaleView.prototype.update = function () {
        var length = this.viewModel.getLengthInPx();
        if (this.scale && length) {
            var stepElems = Array.from(this.scale.children);
            for (var i = 0; i < stepElems.length; i += 1) {
                var position = (length / (stepElems.length - 1)) * i;
                if (this.viewModel.getIsVertical()) {
                    stepElems[i].style.top = position - stepElems[i].offsetHeight / 2 + "px";
                }
                else {
                    stepElems[i].style.left = position - stepElems[i].offsetWidth / 2 + "px";
                }
            }
        }
    };
    // Возвращает элемент scale
    ScaleView.prototype.get = function () {
        return this.scale;
    };
    // Добавляет stepElemOnDown при клике на элементы шкалы значений и вызывает у view
    // changeIsScaleClickable(true)
    ScaleView.prototype.addInteractivity = function () {
        if (this.scale) {
            var stepElems = Array.from(this.scale.children);
            for (var i = 0; i < stepElems.length; i += 1) {
                stepElems[i].addEventListener('mousedown', this._handleStepElemMouseDown);
            }
            this.mainView.changeOptions({
                isScaleClickable: true,
            });
        }
    };
    // Убирает слушатель клика у элементов шкалы значений и обращается к viewModel
    ScaleView.prototype.removeInteractivity = function () {
        if (this.scale) {
            var stepElems = Array.from(this.scale.children);
            for (var i = 0; i < stepElems.length; i += 1) {
                stepElems[i].removeEventListener('mousedown', this._handleStepElemMouseDown);
            }
            this.mainView.changeOptions({
                isScaleClickable: false,
            });
        }
    };
    // Меняет плоскость шкалы значений
    ScaleView.prototype.updateVertical = function () {
        if (this.viewModel.getHasScale()) {
            this.remove();
            this.create();
        }
    };
    // При клике на элементы шкалы значений вызывает moveActiveThumb и
    // убирает активный ползунок
    ScaleView.prototype._handleStepElemMouseDown = function (evt) {
        evt.preventDefault();
        evt.stopPropagation();
        var stepElem = evt.currentTarget;
        var stepLength = this.viewModel.getStepLength();
        if (!this.viewModel.getActiveThumb()) {
            this.mainView.setActiveThumb();
        }
        if (stepLength) {
            var modelProps = this.viewModel.getModelProps();
            if (modelProps && modelProps.stepSize !== undefined) {
                var activeThumb = this.viewModel.getActiveThumb();
                if (activeThumb) {
                    var leftOrTop = void 0;
                    var offsetWidthOrHeigth = void 0;
                    if (this.viewModel.getIsVertical()) {
                        leftOrTop = 'top';
                        offsetWidthOrHeigth = 'offsetHeight';
                    }
                    else {
                        leftOrTop = 'left';
                        offsetWidthOrHeigth = 'offsetWidth';
                    }
                    var stepValue = (parseFloat(stepElem.style[leftOrTop]) + stepElem[offsetWidthOrHeigth] / 2) / (stepLength / modelProps.stepSize);
                    var thumbValue = (parseFloat(activeThumb.style[leftOrTop]) + activeThumb[offsetWidthOrHeigth] / 2) / (stepLength / modelProps.stepSize);
                    this.mainView.moveActiveThumb((stepValue - thumbValue) / modelProps.stepSize);
                    this.mainView.removeActiveThumb();
                }
            }
        }
    };
    return ScaleView;
}());
exports.default = ScaleView;


/***/ }),

/***/ "./src/modules/View/modules/SubViews/SliderContainerView/SliderContainerView.ts":
/*!**************************************************************************************!*\
  !*** ./src/modules/View/modules/SubViews/SliderContainerView/SliderContainerView.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SliderContainerView = /** @class */ (function () {
    function SliderContainerView(target, viewModel) {
        this.target = target;
        this.viewModel = viewModel;
        this.slider = undefined;
    }
    SliderContainerView.prototype.create = function () {
        var _a, _b;
        var slider = document.createElement('div');
        var _c = this.viewModel.getClasses(), sliderClass = _c.sliderClass, sliderVerticalClass = _c.sliderVerticalClass;
        if (Array.isArray(sliderClass)) {
            (_a = slider.classList).add.apply(_a, sliderClass);
        }
        else {
            slider.classList.add(sliderClass);
        }
        if (this.viewModel.getIsVertical()) {
            if (Array.isArray(sliderVerticalClass)) {
                (_b = slider.classList).add.apply(_b, sliderVerticalClass);
            }
            else {
                slider.classList.add(sliderVerticalClass);
            }
        }
        this.target.appendChild(slider);
        this.slider = slider;
        return slider;
    };
    SliderContainerView.prototype.get = function () {
        return this.slider;
    };
    SliderContainerView.prototype.updateVertical = function () {
        var _a, _b;
        if (this.slider) {
            var sliderVerticalClass = this.viewModel.getClasses().sliderVerticalClass;
            if (this.viewModel.getIsVertical()) {
                if (Array.isArray(sliderVerticalClass)) {
                    (_a = this.slider.classList).add.apply(_a, sliderVerticalClass);
                }
                else {
                    this.slider.classList.add(sliderVerticalClass);
                }
            }
            else {
                if (Array.isArray(sliderVerticalClass)) {
                    (_b = this.slider.classList).remove.apply(_b, sliderVerticalClass);
                }
                else {
                    this.slider.classList.remove(sliderVerticalClass);
                }
            }
        }
    };
    return SliderContainerView;
}());
exports.default = SliderContainerView;


/***/ }),

/***/ "./src/modules/View/modules/SubViews/ThumbView/ThumbView.ts":
/*!******************************************************************!*\
  !*** ./src/modules/View/modules/SubViews/ThumbView/ThumbView.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var areNumbersDefined_1 = __importDefault(__webpack_require__(/*! ../../../../../utils/areNumbersDefined */ "./src/utils/areNumbersDefined.ts"));
var ThumbView = /** @class */ (function () {
    function ThumbView(target, viewModel, mainView) {
        this.target = target;
        this.viewModel = viewModel;
        this.mainView = mainView;
        this.thumb = undefined;
        this._handleThumbMouseDown = this._handleThumbMouseDown.bind(this);
        this._handleThumbMouseUp = this._handleThumbMouseUp.bind(this);
        this._handleThumbMouseMove = this._handleThumbMouseMove.bind(this);
        this.removeActiveThumb = this.removeActiveThumb.bind(this);
    }
    // Создает и возвращает ползунок(ки) в баре
    ThumbView.prototype.create = function () {
        var _a, _b;
        var valuePosition = this.viewModel.getValuePosition();
        var thumbClass = this.viewModel.getClasses().thumbClass;
        if (typeof valuePosition === 'number') {
            var thumb = document.createElement('div');
            if (Array.isArray(thumbClass)) {
                (_a = thumb.classList).add.apply(_a, thumbClass);
            }
            else {
                thumb.classList.add(thumbClass);
            }
            thumb.style.position = 'absolute';
            this.target.appendChild(thumb);
            if (this.viewModel.getIsVertical()) {
                thumb.style.top = valuePosition - thumb.offsetHeight / 2 + "px";
            }
            else {
                thumb.style.left = valuePosition - thumb.offsetWidth / 2 + "px";
            }
            this.thumb = thumb;
            this.addListener();
            return thumb;
        }
        if (Array.isArray(valuePosition)) {
            var thumbElems = [];
            for (var i = 0; i < valuePosition.length; i += 1) {
                var thumbElem = document.createElement('div');
                if (Array.isArray(thumbClass)) {
                    (_b = thumbElem.classList).add.apply(_b, thumbClass);
                }
                else {
                    thumbElem.classList.add(thumbClass);
                }
                thumbElem.style.position = 'absolute';
                this.target.appendChild(thumbElem);
                if (this.viewModel.getIsVertical()) {
                    thumbElem.style.top = valuePosition[i] - thumbElem.offsetHeight / 2 + "px";
                }
                else {
                    thumbElem.style.left = valuePosition[i] - thumbElem.offsetWidth / 2 + "px";
                }
                thumbElems.push(thumbElem);
            }
            this.thumb = [thumbElems[0], thumbElems[1]];
            this.addListener();
            return this.thumb;
        }
        return undefined;
    };
    // Удаляет ползунок(ки)
    ThumbView.prototype.remove = function () {
        if (this.thumb) {
            if (Array.isArray(this.thumb)) {
                this.thumb.forEach(function (elem) {
                    elem.remove();
                });
            }
            else {
                this.thumb.remove();
            }
        }
        this.thumb = undefined;
    };
    // Обновляет положение ползунков
    ThumbView.prototype.update = function () {
        var _this = this;
        if (this.thumb) {
            var valuePosition = this.viewModel.getValuePosition();
            var valPos_1;
            var thumb_1;
            if (valuePosition !== undefined) {
                if (typeof valuePosition === 'number') {
                    if (!Array.isArray(this.thumb)) {
                        valPos_1 = [valuePosition];
                        thumb_1 = [this.thumb];
                    }
                    else {
                        throw new Error('valuePosition is number, but thumb is array.');
                    }
                }
                else {
                    if (Array.isArray(this.thumb)) {
                        valPos_1 = valuePosition;
                        thumb_1 = this.thumb;
                    }
                    else {
                        throw new Error('valuePosition is array, but thumb is not array.');
                    }
                }
                thumb_1.forEach(function (_, index) {
                    if (_this.viewModel.getIsVertical()) {
                        thumb_1[index].style.top = valPos_1[index] - thumb_1[index].offsetHeight / 2 + "px";
                        thumb_1[index].style.left = '';
                    }
                    else {
                        thumb_1[index].style.left = valPos_1[index] - thumb_1[index].offsetWidth / 2 + "px";
                        thumb_1[index].style.top = '';
                    }
                });
            }
        }
    };
    // Возвращает ползунки
    ThumbView.prototype.get = function () {
        return this.thumb;
    };
    // Вызывает this.removeActiveThumb, добавляет класс новому activeThumb, увеличивает z-index
    // нового активного ползунка, обращается к mainView
    ThumbView.prototype.setActiveThumb = function (numOfThumb) {
        var _a;
        if (numOfThumb === void 0) { numOfThumb = 1; }
        if (this.thumb) {
            this.removeActiveThumb();
            var activeThumb = Array.isArray(this.thumb) ? this.thumb[numOfThumb] : this.thumb;
            var activeThumbClass = this.viewModel.getClasses().activeThumbClass;
            if (activeThumb) {
                if (Array.isArray(activeThumbClass)) {
                    (_a = activeThumb.classList).add.apply(_a, activeThumbClass);
                }
                else {
                    activeThumb.classList.add(activeThumbClass);
                }
                if (Array.isArray(this.thumb)) {
                    if (activeThumb.isEqualNode(this.thumb[0])) {
                        var zIndex = window.getComputedStyle(this.thumb[1]).zIndex === 'auto'
                            ? 0 : Number(window.getComputedStyle(this.thumb[1]).zIndex);
                        activeThumb.style.zIndex = String(zIndex + 1);
                    }
                    else {
                        var zIndex = window.getComputedStyle(this.thumb[0]).zIndex === 'auto'
                            ? 0 : Number(window.getComputedStyle(this.thumb[0]).zIndex);
                        activeThumb.style.zIndex = String(zIndex + 1);
                    }
                }
                this.mainView.setActiveThumb(numOfThumb);
            }
        }
    };
    // Убирает класс активного ползунка
    ThumbView.prototype.removeActiveThumb = function () {
        var _a;
        var activeThumb = this.viewModel.getActiveThumb();
        var activeThumbClass = this.viewModel.getClasses().activeThumbClass;
        if (activeThumb) {
            if (Array.isArray(activeThumbClass)) {
                (_a = activeThumb.classList).remove.apply(_a, activeThumbClass);
            }
            else {
                activeThumb.classList.remove(activeThumbClass);
            }
        }
    };
    // Перемещает ползунок на numOfSteps шагов
    ThumbView.prototype.moveActiveThumb = function (numOfSteps) {
        if (numOfSteps === void 0) { numOfSteps = 1; }
        var stepLengthAndLength = [this.viewModel.getStepLength(), this.viewModel.getLengthInPx()];
        if (areNumbersDefined_1.default(stepLengthAndLength)) {
            var stepLength = stepLengthAndLength[0], length_1 = stepLengthAndLength[1];
            var activeThumb = this.viewModel.getActiveThumb();
            if (activeThumb) {
                var isActiveThumbFirst = false;
                if (Array.isArray(this.thumb)) {
                    if (this.thumb[0].isEqualNode(activeThumb)) {
                        isActiveThumbFirst = true;
                    }
                }
                var offsetWidthOrHeight = void 0;
                var leftOrTop = void 0;
                if (this.viewModel.getIsVertical()) {
                    offsetWidthOrHeight = 'offsetHeight';
                    leftOrTop = 'top';
                }
                else {
                    offsetWidthOrHeight = 'offsetWidth';
                    leftOrTop = 'left';
                }
                var maxPos = length_1 - activeThumb[offsetWidthOrHeight] / 2;
                var minPos = -activeThumb[offsetWidthOrHeight] / 2;
                if (Array.isArray(this.thumb)) {
                    if (isActiveThumbFirst) {
                        maxPos = parseFloat(this.thumb[1].style[leftOrTop]);
                    }
                    else {
                        minPos = parseFloat(this.thumb[0].style[leftOrTop]);
                    }
                }
                var offset = stepLength * numOfSteps;
                var pos = parseFloat(activeThumb.style[leftOrTop]) + offset;
                if (pos <= maxPos) {
                    if (pos >= minPos) {
                        activeThumb.style[leftOrTop] = pos + "px";
                    }
                    else {
                        activeThumb.style[leftOrTop] = minPos + "px";
                    }
                }
                else {
                    activeThumb.style[leftOrTop] = maxPos + "px";
                }
                var thumbNumber = isActiveThumbFirst ? 0 : 1;
                this.mainView.onThumbMove(numOfSteps, thumbNumber);
            }
        }
    };
    // Добавляет слушатель thumb onMouseDown к ползунку(ам)
    ThumbView.prototype.addListener = function () {
        if (Array.isArray(this.thumb)) {
            for (var i = 0; i <= 1; i += 1) {
                this.thumb[i].addEventListener('mousedown', this._handleThumbMouseDown);
                this.thumb[i].addEventListener('touchstart', this._handleThumbMouseDown);
            }
        }
        else {
            if (this.thumb) {
                this.thumb.addEventListener('mousedown', this._handleThumbMouseDown);
                this.thumb.addEventListener('touchstart', this._handleThumbMouseDown);
            }
        }
    };
    // При нажатии на ползунок убирает z-index предыдущего активного ползунка,
    // вызывает this.setActiveThumb, обращается к mainView для изменения clientX/Y, добавляет
    // обработчики _handleThumbMouseMove, _handleThumbMouseUp и убирает слушатель
    // document-mouseup-removeActiveThumb
    ThumbView.prototype._handleThumbMouseDown = function (evt) {
        var activeThumb = this.viewModel.getActiveThumb();
        evt.preventDefault();
        evt.stopPropagation();
        var target = evt.target;
        if (target) {
            if (activeThumb) {
                activeThumb.style.zIndex = '';
            }
            var thumbNumber = void 0;
            if (Array.isArray(this.thumb)) {
                if (target.isEqualNode(this.thumb[0])) {
                    thumbNumber = 0;
                }
                else {
                    thumbNumber = 1;
                }
            }
            this.setActiveThumb(thumbNumber);
            if (activeThumb) {
                // Тут возможно this._clientX/Y = evt.clientX/Y, но я сделал так,
                // чтобы положение курсора все время было в середине thumb. Т.е.
                // определение прошлого положения курсора зависит не от самого
                // курсора, а от thumb(аналогично в _handleThumbMouseMove)
                var clientX = activeThumb.getBoundingClientRect().left
                    + activeThumb.offsetWidth / 2;
                var clientY = activeThumb.getBoundingClientRect().top
                    + activeThumb.offsetHeight / 2;
                this.mainView.setClientCoords([clientX, clientY]);
            }
            document.addEventListener('mousemove', this._handleThumbMouseMove);
            document.addEventListener('touchmove', this._handleThumbMouseMove);
            document.addEventListener('mouseup', this._handleThumbMouseUp);
            document.addEventListener('touchend', this._handleThumbMouseUp);
            document.removeEventListener('mouseup', this.removeActiveThumb);
            document.removeEventListener('touchend', this.removeActiveThumb);
        }
    };
    // При отжатии кнопки после ползунка убирает обработчики _handleThumbMouseMove и
    // _handleThumbMouseUp, добавляет слушатель document-mouseup, который убирает
    // активный тамб при клике в любое место документа
    ThumbView.prototype._handleThumbMouseUp = function () {
        document.removeEventListener('mousemove', this._handleThumbMouseMove);
        document.removeEventListener('touchmove', this._handleThumbMouseMove);
        document.removeEventListener('mouseup', this._handleThumbMouseUp);
        document.removeEventListener('touchend', this._handleThumbMouseUp);
        document.addEventListener('mouseup', this.removeActiveThumb);
        document.addEventListener('touchend', this.removeActiveThumb);
    };
    // При перемещении мыши вызывается moveActiveThumb с numOfSteps,
    // зависящим от смещения мыши, обращается к mainView для смены coords
    ThumbView.prototype._handleThumbMouseMove = function (evt) {
        var stepLength = this.viewModel.getStepLength();
        var activeThumb = this.viewModel.getActiveThumb();
        if (stepLength) {
            if (activeThumb) {
                var clientX = void 0;
                var clientY = void 0;
                if ('clientX' in evt) {
                    clientX = evt.clientX;
                    clientY = evt.clientY;
                }
                else {
                    clientX = evt.touches[0].clientX;
                    clientY = evt.touches[0].clientY;
                }
                if (this.viewModel.getIsVertical()) {
                    if (Math.abs(clientY - this.viewModel.getClientCoords()[1]) >= stepLength) {
                        var numOfSteps = Math.trunc((clientY - this.viewModel.getClientCoords()[1]) / stepLength);
                        this.moveActiveThumb(numOfSteps);
                        this.mainView.setClientCoords([
                            this.viewModel.getClientCoords()[0],
                            activeThumb.getBoundingClientRect().top + activeThumb.offsetHeight / 2,
                        ]);
                    }
                }
                else {
                    if (Math.abs(clientX - this.viewModel.getClientCoords()[0]) >= stepLength) {
                        var numOfSteps = Math.trunc((clientX - this.viewModel.getClientCoords()[0]) / stepLength);
                        this.moveActiveThumb(numOfSteps);
                        this.mainView.setClientCoords([
                            activeThumb.getBoundingClientRect().left + activeThumb.offsetWidth / 2,
                            this.viewModel.getClientCoords()[1],
                        ]);
                    }
                }
            }
        }
    };
    return ThumbView;
}());
exports.default = ThumbView;


/***/ }),

/***/ "./src/modules/View/modules/SubViews/TooltipView/TooltipView.ts":
/*!**********************************************************************!*\
  !*** ./src/modules/View/modules/SubViews/TooltipView/TooltipView.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isModelPropsValuesDefined_1 = __importDefault(__webpack_require__(/*! ../../../../../utils/isModelPropsValuesDefined */ "./src/utils/isModelPropsValuesDefined.ts"));
var TooltipView = /** @class */ (function () {
    function TooltipView(target, viewModel) {
        this.target = target;
        this.viewModel = viewModel;
        this.tooltip = undefined;
    }
    // Создает и возвращает подсказки
    TooltipView.prototype.create = function () {
        var _a, _b;
        var modelProps = this.viewModel.getModelProps();
        if (isModelPropsValuesDefined_1.default(modelProps)) {
            var value = modelProps.value;
            var _c = this.viewModel.getClasses(), tooltipClass = _c.tooltipClass, tooltipValueClass = _c.tooltipValueClass;
            if (Array.isArray(this.target)) {
                var tooltipElems = [];
                for (var i = 0; i < this.target.length; i += 1) {
                    var tooltip = document.createElement('div');
                    if (Array.isArray(tooltipClass)) {
                        (_a = tooltip.classList).add.apply(_a, tooltipClass);
                    }
                    else {
                        tooltip.classList.add(tooltipClass);
                    }
                    if (Array.isArray(value)) {
                        tooltip.innerHTML = "<div class=\"" + tooltipValueClass + "\">" + Number((value[i]).toFixed(3)) + "</div>";
                    }
                    this.target[i].appendChild(tooltip);
                    tooltipElems.push(tooltip);
                }
                this.tooltip = [tooltipElems[0], tooltipElems[1]];
            }
            else {
                var tooltip = document.createElement('div');
                if (Array.isArray(tooltipClass)) {
                    (_b = tooltip.classList).add.apply(_b, tooltipClass);
                }
                else {
                    tooltip.classList.add(tooltipClass);
                }
                if (!Array.isArray(value)) {
                    tooltip.innerHTML = "<div class=\"" + tooltipValueClass + "\">" + Number((value).toFixed(3)) + "</div>";
                }
                this.target.appendChild(tooltip);
                this.tooltip = tooltip;
            }
            return this.tooltip;
        }
        return undefined;
    };
    // Удаляет подсказки
    TooltipView.prototype.remove = function () {
        if (Array.isArray(this.tooltip)) {
            for (var i = 0; i <= 1; i += 1) {
                this.tooltip[i].remove();
            }
        }
        else if (this.tooltip) {
            this.tooltip.remove();
        }
        this.tooltip = undefined;
    };
    // Обновляет значение в подсказках
    TooltipView.prototype.update = function () {
        var modelProps = this.viewModel.getModelProps();
        if (isModelPropsValuesDefined_1.default(modelProps)) {
            var value = modelProps.value;
            if (this.tooltip) {
                var tooltipValueClass = this.viewModel.getClasses().tooltipValueClass;
                if (Array.isArray(this.tooltip)) {
                    if (Array.isArray(value)) {
                        for (var i = 0; i <= 1; i += 1) {
                            this.tooltip[i].innerHTML = "<div class=\"" + tooltipValueClass + "\">" + Number((value[i]).toFixed(3)) + "</div>";
                        }
                    }
                }
                else {
                    if (!Array.isArray(value)) {
                        this.tooltip.innerHTML = "<div class=\"" + tooltipValueClass + "\">" + Number((value).toFixed(3)) + "</div>";
                    }
                }
            }
        }
    };
    // Возвращает tooltip
    TooltipView.prototype.get = function () {
        return this.tooltip;
    };
    return TooltipView;
}());
exports.default = TooltipView;


/***/ }),

/***/ "./src/modules/View/modules/SubViews/ValueInfoView/ValueInfoView.ts":
/*!**************************************************************************!*\
  !*** ./src/modules/View/modules/SubViews/ValueInfoView/ValueInfoView.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isModelPropsValuesDefined_1 = __importDefault(__webpack_require__(/*! ../../../../../utils/isModelPropsValuesDefined */ "./src/utils/isModelPropsValuesDefined.ts"));
var ValueInfoView = /** @class */ (function () {
    function ValueInfoView(target, viewModel) {
        this.target = target;
        this.viewModel = viewModel;
        this.valueInfo = undefined;
    }
    // Создает элемент с текущим значением. По умолчанию, если isRange=false, то
    // указывается просто model.value, иначе записывается в виде value[0] - value[1]
    ValueInfoView.prototype.create = function () {
        var _a;
        var modelProps = this.viewModel.getModelProps();
        if (isModelPropsValuesDefined_1.default(modelProps)) {
            var valueInfo = document.createElement('div');
            var value = modelProps.value;
            var valueInfoClass = this.viewModel.getClasses().valueInfoClass;
            if (Array.isArray(valueInfoClass)) {
                (_a = valueInfo.classList).add.apply(_a, valueInfoClass);
            }
            else {
                valueInfo.classList.add(valueInfoClass);
            }
            this.target.appendChild(valueInfo);
            if (typeof value === 'number') {
                valueInfo.innerText = "" + value;
            }
            else {
                valueInfo.innerText = value[0] + " - " + value[1];
            }
            this.valueInfo = valueInfo;
            return valueInfo;
        }
        return undefined;
    };
    // Удаляет элемент со значением
    ValueInfoView.prototype.remove = function () {
        if (this.valueInfo) {
            this.valueInfo.remove();
            this.valueInfo = undefined;
        }
    };
    // Обновляет значение в valueInfo
    ValueInfoView.prototype.update = function () {
        var modelProps = this.viewModel.getModelProps();
        if (isModelPropsValuesDefined_1.default(modelProps)) {
            if (this.valueInfo) {
                if (typeof modelProps.value === 'number') {
                    this.valueInfo.innerText = "" + modelProps.value;
                }
                else {
                    this.valueInfo.innerText = modelProps.value[0] + " - " + modelProps.value[1];
                }
            }
        }
    };
    ValueInfoView.prototype.get = function () {
        return this.valueInfo;
    };
    return ValueInfoView;
}());
exports.default = ValueInfoView;


/***/ }),

/***/ "./src/modules/View/modules/View/View.ts":
/*!***********************************************!*\
  !*** ./src/modules/View/modules/View/View.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ViewModel_1 = __importDefault(__webpack_require__(/*! ../ViewModel/ViewModel */ "./src/modules/View/modules/ViewModel/ViewModel.ts"));
var SliderContainerView_1 = __importDefault(__webpack_require__(/*! ../SubViews/SliderContainerView/SliderContainerView */ "./src/modules/View/modules/SubViews/SliderContainerView/SliderContainerView.ts"));
var BarView_1 = __importDefault(__webpack_require__(/*! ../SubViews/BarView/BarView */ "./src/modules/View/modules/SubViews/BarView/BarView.ts"));
var ScaleView_1 = __importDefault(__webpack_require__(/*! ../SubViews/ScaleView/ScaleView */ "./src/modules/View/modules/SubViews/ScaleView/ScaleView.ts"));
var ThumbView_1 = __importDefault(__webpack_require__(/*! ../SubViews/ThumbView/ThumbView */ "./src/modules/View/modules/SubViews/ThumbView/ThumbView.ts"));
var TooltipView_1 = __importDefault(__webpack_require__(/*! ../SubViews/TooltipView/TooltipView */ "./src/modules/View/modules/SubViews/TooltipView/TooltipView.ts"));
var ValueInfoView_1 = __importDefault(__webpack_require__(/*! ../SubViews/ValueInfoView/ValueInfoView */ "./src/modules/View/modules/SubViews/ValueInfoView/ValueInfoView.ts"));
var Observer_1 = __importDefault(__webpack_require__(/*! ../../../../ObserverAndSubject/Observer */ "./src/ObserverAndSubject/Observer.ts"));
var WindowListeners_1 = __importDefault(__webpack_require__(/*! ./WindowListeners */ "./src/modules/View/modules/View/WindowListeners.ts"));
var View = /** @class */ (function (_super) {
    __extends(View, _super);
    function View(viewOptions, parent) {
        var _this = this;
        var classes = {
            sliderClass: viewOptions.sliderClass ? viewOptions.sliderClass : 'slider',
            sliderVerticalClass: viewOptions.sliderVerticalClass ? viewOptions.sliderVerticalClass : 'slider_vertical',
            barClass: viewOptions.barClass ? viewOptions.barClass : 'slider__bar',
            progressBarClass: viewOptions.progressBarClass ? viewOptions.progressBarClass : 'slider__progress-bar',
            thumbClass: viewOptions.thumbClass ? viewOptions.thumbClass : 'slider__thumb',
            activeThumbClass: viewOptions.activeThumbClass ? viewOptions.activeThumbClass : 'slider__thumb_active',
            tooltipClass: viewOptions.tooltipClass ? viewOptions.tooltipClass : 'slider__tooltip',
            tooltipValueClass: viewOptions.tooltipValueClass ? viewOptions.tooltipValueClass : 'slider__tooltip-value',
            scaleClass: viewOptions.scaleClass ? viewOptions.scaleClass : 'slider__scale',
            valueInfoClass: viewOptions.valueInfoClass ? viewOptions.valueInfoClass : 'slider__value-info',
        };
        var viewModel = new ViewModel_1.default({
            modelProps: undefined,
            classes: classes,
            length: viewOptions.length,
            lengthInPx: undefined,
            isVertical: viewOptions.isVertical,
            hasTooltip: viewOptions.hasTooltip,
            hasValueInfo: viewOptions.hasValueInfo,
            hasScale: viewOptions.hasScale,
            scaleValue: viewOptions.scaleValue,
            isResponsive: viewOptions.isResponsive,
            useKeyboard: viewOptions.useKeyboard,
            isScaleClickable: viewOptions.isScaleClickable,
            activeThumb: undefined,
            clientX: 0,
            clientY: 0,
        });
        _this = _super.call(this, viewModel) || this;
        _this.viewModel = viewModel;
        _this.presenter = undefined;
        _this._parent = parent;
        _this.sliderContainerView = undefined;
        _this.barView = undefined;
        _this.scaleView = undefined;
        _this.thumbView = undefined;
        _this.tooltipView = undefined;
        _this.valueInfoView = undefined;
        _this.windowListeners = undefined;
        return _this;
    }
    // Возвращает элемент, который указан в elemName
    View.prototype.getElem = function (elemName) {
        var elem;
        switch (elemName) {
            case 'parent':
                elem = this._parent;
                break;
            case 'slider':
                elem = this.sliderContainerView ? this.sliderContainerView.get() : undefined;
                break;
            case 'bar':
                elem = this.barView ? this.barView.getBar() : undefined;
                break;
            case 'progressBar':
                elem = this.barView ? this.barView.getProgressBar() : undefined;
                break;
            case 'thumb':
                elem = this.thumbView ? this.thumbView.get() : undefined;
                break;
            case 'tooltip':
                elem = this.tooltipView ? this.tooltipView.get() : undefined;
                break;
            case 'scale':
                elem = this.scaleView ? this.scaleView.get() : undefined;
                break;
            case 'valueInfo':
                elem = this.valueInfoView ? this.valueInfoView.get() : undefined;
                break;
            default:
                elem = undefined;
        }
        return elem;
    };
    View.prototype.drawSlider = function () {
        this.sliderContainerView = new SliderContainerView_1.default(this._parent, this.viewModel);
        var slider = this.sliderContainerView.create();
        this.barView = new BarView_1.default(slider, this.viewModel);
        var bar = this.barView.createBar();
        var length = this.viewModel.getIsVertical() ? bar.offsetHeight : bar.offsetWidth;
        this.viewModel.setLengthInPx(length);
        this.barView.createProgressBar();
        this.thumbView = new ThumbView_1.default(bar, this.viewModel, this);
        var thumb = this.thumbView.create();
        if (thumb) {
            this.tooltipView = new TooltipView_1.default(thumb, this.viewModel);
            if (this.viewModel.getHasTooltip()) {
                this.tooltipView.create();
            }
        }
        this.scaleView = new ScaleView_1.default(bar, this.viewModel, this);
        if (this.viewModel.getHasScale()) {
            this.scaleView.create();
        }
        this.valueInfoView = new ValueInfoView_1.default(slider, this.viewModel);
        if (this.viewModel.getHasValueInfo()) {
            this.valueInfoView.create();
        }
        this.windowListeners = new WindowListeners_1.default(this.viewModel, {
            thumb: this.thumbView,
            bar: this.barView,
            scale: this.scaleView,
        });
        if (this.viewModel.getUseKeyboard()) {
            this.windowListeners.addKeyboardListener();
        }
        this.windowListeners.setIsResponsive(this.viewModel.getIsResponsive());
    };
    // В зависимости от action, обновляет view
    View.prototype.updateModelPropsInSlider = function (action) {
        switch (action.type) {
            case 'UPDATE_VALUE':
                if (action.updatedProps) {
                    this.setModelProps({
                        value: action.updatedProps.value,
                    });
                }
                if (this.thumbView)
                    this.thumbView.update();
                if (this.valueInfoView)
                    this.valueInfoView.update();
                if (this.barView)
                    this.barView.updateProgressBar();
                if (this.tooltipView)
                    this.tooltipView.update();
                break;
            case 'UPDATE_IS-RANGE':
                if (action.updatedProps) {
                    this.setModelProps({
                        value: action.updatedProps.value,
                        isRange: action.updatedProps.isRange,
                    });
                }
                if (this.thumbView) {
                    this.thumbView.remove();
                    var thumb = this.thumbView.create();
                    if (thumb) {
                        if (this.tooltipView)
                            this.tooltipView.remove();
                        this.tooltipView = new TooltipView_1.default(thumb, this.viewModel);
                        if (this.viewModel.getHasTooltip()) {
                            this.tooltipView.create();
                        }
                    }
                }
                if (this.barView)
                    this.barView.updateProgressBar();
                if (this.valueInfoView)
                    this.valueInfoView.update();
                break;
            case 'UPDATE_MIN-MAX':
                if (action.updatedProps) {
                    this.setModelProps({
                        value: action.updatedProps.value,
                        min: action.updatedProps.min,
                        max: action.updatedProps.max,
                        stepSize: action.updatedProps.stepSize,
                    });
                }
                if (this.thumbView)
                    this.thumbView.update();
                if (this.scaleView && this.viewModel.getHasScale()) {
                    this.scaleView.remove();
                    this.scaleView.create();
                }
                if (this.valueInfoView)
                    this.valueInfoView.update();
                if (this.barView)
                    this.barView.updateProgressBar();
                if (this.tooltipView)
                    this.tooltipView.update();
                break;
            case 'UPDATE_STEP-SIZE':
                if (action.updatedProps) {
                    this.setModelProps({
                        stepSize: action.updatedProps.stepSize,
                    });
                }
                break;
            default:
                break;
        }
    };
    View.prototype.setPresenter = function (presenter) {
        this.presenter = presenter;
    };
    // Меняет настройки, передавая в viewModel
    View.prototype.changeOptions = function (newOptions) {
        if (newOptions.length !== undefined) {
            this.viewModel.setLength(newOptions.length);
        }
        if (newOptions.hasTooltip !== undefined) {
            this.viewModel.setHasTooltip(newOptions.hasTooltip);
        }
        if (newOptions.hasScale !== undefined) {
            this.viewModel.setHasScale(newOptions.hasScale);
        }
        if (newOptions.scaleValue !== undefined) {
            this.viewModel.setScaleValue(newOptions.scaleValue);
        }
        if (newOptions.hasValueInfo !== undefined) {
            this.viewModel.setHasValueInfo(newOptions.hasValueInfo);
        }
        if (newOptions.isVertical !== undefined) {
            this.viewModel.setIsVertical(newOptions.isVertical);
        }
        if (newOptions.isResponsive !== undefined) {
            this.viewModel.setIsResponsive(newOptions.isResponsive);
        }
        if (newOptions.useKeyboard !== undefined) {
            this.viewModel.setUseKeyboard(newOptions.useKeyboard);
        }
        if (newOptions.isScaleClickable !== undefined) {
            if (this.viewModel.getIsScaleClickable() !== newOptions.isScaleClickable) {
                this.viewModel.setIsScaleClickable(newOptions.isScaleClickable);
            }
        }
    };
    // Обновляет визуальные настройки слайдера
    View.prototype.update = function (action) {
        switch (action.type) {
            case 'UPDATE_LENGTH':
                if (this.barView)
                    this.barView.updateBar();
                if (this.barView)
                    this.viewModel.setLengthInPx(this.barView.getOffsetLength() || 0);
                if (this.barView)
                    this.barView.updateProgressBar();
                if (this.thumbView)
                    this.thumbView.update();
                if (this.scaleView)
                    this.scaleView.update();
                break;
            case 'UPDATE_IS-VERTICAL':
                if (this.sliderContainerView)
                    this.sliderContainerView.updateVertical();
                if (this.barView)
                    this.barView.updateBar();
                if (this.barView)
                    this.barView.updateProgressBar();
                if (this.thumbView)
                    this.thumbView.update();
                if (this.scaleView)
                    this.scaleView.updateVertical();
                break;
            case 'UPDATE_IS-RESPONSIVE':
                if (this.windowListeners) {
                    this.windowListeners.setIsResponsive(this.viewModel.getIsResponsive());
                }
                break;
            case 'UPDATE_HAS-TOOLTIP':
                if (this.tooltipView) {
                    if (this.viewModel.getHasTooltip()) {
                        this.tooltipView.remove();
                        this.tooltipView.create();
                    }
                    else {
                        this.tooltipView.remove();
                    }
                }
                break;
            case 'UPDATE_HAS-SCALE':
                if (this.scaleView) {
                    this.scaleView.remove();
                    if (this.viewModel.getHasScale()) {
                        this.scaleView.create();
                    }
                }
                break;
            case 'UPDATE_SCALE-VALUE':
                if (this.scaleView) {
                    if (this.viewModel.getHasScale()) {
                        this.scaleView.remove();
                        this.scaleView.create();
                    }
                }
                break;
            case 'UPDATE_HAS-VALUE-INFO':
                if (this.valueInfoView) {
                    if (this.viewModel.getHasValueInfo()) {
                        this.valueInfoView.remove();
                        this.valueInfoView.create();
                    }
                    else {
                        this.valueInfoView.remove();
                    }
                }
                break;
            case 'UPDATE_USE-KEYBOARD':
                if (this.windowListeners) {
                    this.windowListeners.removeKeyboardListener();
                    if (this.viewModel.getUseKeyboard()) {
                        this.windowListeners.addKeyboardListener();
                    }
                }
                break;
            case 'UPDATE_IS-SCALE-CLICKABLE':
                if (this.viewModel.getHasScale()) {
                    if (this.scaleView) {
                        if (this.viewModel.getIsScaleClickable()) {
                            this.scaleView.addInteractivity();
                        }
                        else {
                            this.scaleView.removeInteractivity();
                        }
                    }
                }
                break;
            default:
                break;
        }
    };
    // Обращается к viewModel для изменения active thumb
    View.prototype.setActiveThumb = function (numOfThumb) {
        if (numOfThumb === void 0) { numOfThumb = 1; }
        if (this.thumbView) {
            var thumb = this.thumbView.get();
            if (thumb) {
                if (Array.isArray(thumb)) {
                    this.viewModel.setActiveThumb(thumb[numOfThumb]);
                }
                else {
                    this.viewModel.setActiveThumb(thumb);
                }
            }
        }
    };
    // Обращается к viewModel
    View.prototype.setModelProps = function (modelProps) {
        this.viewModel.setModelProps(modelProps);
    };
    // Обращается к thumbView
    View.prototype.moveActiveThumb = function (steps) {
        if (steps === void 0) { steps = 1; }
        if (this.thumbView) {
            this.thumbView.moveActiveThumb(steps);
        }
    };
    // Убирает класс активного ползунка и обращается к viewModel для удаления активного ползунка
    View.prototype.removeActiveThumb = function () {
        this.viewModel.removeActiveThumb();
    };
    // Передает вызов в presenter
    View.prototype.onThumbMove = function (numOfSteps, numOfThumb) {
        if (this.presenter) {
            this.presenter.onThumbMove(numOfSteps, numOfThumb);
        }
    };
    // Передает значение в viewModel
    View.prototype.setClientCoords = function (coords) {
        this.viewModel.setClientCoords(coords);
    };
    View.prototype.getViewModel = function () {
        return this.viewModel;
    };
    return View;
}(Observer_1.default));
exports.default = View;


/***/ }),

/***/ "./src/modules/View/modules/View/WindowListeners.ts":
/*!**********************************************************!*\
  !*** ./src/modules/View/modules/View/WindowListeners.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WindowListeners = /** @class */ (function () {
    function WindowListeners(viewModel, views) {
        this.viewModel = viewModel;
        this.thumbView = views.thumb;
        this.barView = views.bar;
        this.scaleView = views.scale;
        this._handleWindowResize = this._handleWindowResize.bind(this);
        this._handleDocumentKeyDown = this._handleDocumentKeyDown.bind(this);
    }
    // Добавить обработчик onKeydown и useKeyboard = true
    WindowListeners.prototype.addKeyboardListener = function () {
        document.addEventListener('keydown', this._handleDocumentKeyDown);
    };
    // Убирает слушатель клавиатуры и useKeyboard = false
    WindowListeners.prototype.removeKeyboardListener = function () {
        document.removeEventListener('keydown', this._handleDocumentKeyDown);
    };
    // Изменяет значение isResponsive, добавляет/убирает слушатели window resize
    // Возвращает новое значение isResponsive
    WindowListeners.prototype.setIsResponsive = function (newIsResponsive) {
        if (newIsResponsive) {
            window.removeEventListener('resize', this._handleWindowResize);
            window.addEventListener('resize', this._handleWindowResize);
        }
        else {
            window.removeEventListener('resize', this._handleWindowResize);
        }
    };
    // При нажатии клавиш wasd и стрелок вызывается moveActiveThumb(1/-1)
    WindowListeners.prototype._handleDocumentKeyDown = function (evt) {
        var isThisNextKey = evt.key === 'ArrowRight' || evt.key === 'ArrowBottom'
            || evt.key === 'd' || evt.key === 's';
        var isThisPrevKey = evt.key === 'ArrowLeft' || evt.key === 'ArrowTop'
            || evt.key === 'a' || evt.key === 'w';
        if (this.thumbView) {
            if (isThisNextKey) {
                this.thumbView.moveActiveThumb(1);
            }
            else if (isThisPrevKey) {
                this.thumbView.moveActiveThumb(-1);
            }
        }
    };
    // Используется в слушателях window-resize
    WindowListeners.prototype._handleWindowResize = function () {
        if (this.barView) {
            var bar = this.barView.getBar();
            if (bar) {
                var currentLength = this.viewModel.getIsVertical() ? bar.offsetHeight : bar.offsetWidth;
                if (currentLength !== this.viewModel.getLengthInPx()) {
                    this.barView.updateProgressBar();
                    if (this.thumbView)
                        this.thumbView.update();
                    if (this.scaleView)
                        this.scaleView.update();
                    this.viewModel.setLengthInPx(currentLength);
                }
            }
        }
    };
    return WindowListeners;
}());
exports.default = WindowListeners;


/***/ }),

/***/ "./src/modules/View/modules/ViewModel/ViewModel.ts":
/*!*********************************************************!*\
  !*** ./src/modules/View/modules/ViewModel/ViewModel.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = __importDefault(__webpack_require__(/*! ../../../../ObserverAndSubject/Subject */ "./src/ObserverAndSubject/Subject.ts"));
var isModelPropsValuesDefined_1 = __importDefault(__webpack_require__(/*! ../../../../utils/isModelPropsValuesDefined */ "./src/utils/isModelPropsValuesDefined.ts"));
var ViewModel = /** @class */ (function (_super) {
    __extends(ViewModel, _super);
    function ViewModel(data) {
        var _this = _super.call(this) || this;
        _this.data = data;
        return _this;
    }
    // Убирает активный полузнок
    ViewModel.prototype.removeActiveThumb = function () {
        this.data.activeThumb = undefined;
    };
    // Перезаписывает активный ползунок
    ViewModel.prototype.setActiveThumb = function (newActiveThumb) {
        this.data.activeThumb = newActiveThumb;
    };
    ViewModel.prototype.setModelProps = function (newModelProps) {
        this.data.modelProps = __assign(__assign({}, this.data.modelProps), newModelProps);
    };
    ViewModel.prototype.setClientCoords = function (coords) {
        this.data.clientX = coords[0], this.data.clientY = coords[1];
    };
    ViewModel.prototype.setLength = function (newLength) {
        this.data.length = newLength;
        this.notify({
            type: 'UPDATE_LENGTH',
        });
    };
    ViewModel.prototype.setLengthInPx = function (newLength) {
        this.data.lengthInPx = newLength;
    };
    ViewModel.prototype.setIsVertical = function (newIsVertical) {
        this.data.isVertical = newIsVertical;
        this.notify({
            type: 'UPDATE_IS-VERTICAL',
        });
    };
    ViewModel.prototype.setHasScale = function (newHasScale) {
        this.data.hasScale = newHasScale;
        this.notify({
            type: 'UPDATE_HAS-SCALE',
        });
    };
    ViewModel.prototype.setScaleValue = function (newScaleValue) {
        this.data.scaleValue = newScaleValue;
        this.notify({
            type: 'UPDATE_SCALE-VALUE',
        });
    };
    ViewModel.prototype.setHasTooltip = function (newHasTooltip) {
        this.data.hasTooltip = newHasTooltip;
        this.notify({
            type: 'UPDATE_HAS-TOOLTIP',
        });
    };
    ViewModel.prototype.setHasValueInfo = function (newHasValueInfo) {
        this.data.hasValueInfo = newHasValueInfo;
        this.notify({
            type: 'UPDATE_HAS-VALUE-INFO',
        });
    };
    ViewModel.prototype.setIsResponsive = function (newIsResponsive) {
        this.data.isResponsive = newIsResponsive;
        this.notify({
            type: 'UPDATE_IS-RESPONSIVE',
        });
    };
    ViewModel.prototype.setUseKeyboard = function (newUseKeyboard) {
        this.data.useKeyboard = newUseKeyboard;
        this.notify({
            type: 'UPDATE_USE-KEYBOARD',
        });
    };
    ViewModel.prototype.setIsScaleClickable = function (newIsScaleClickable) {
        this.data.isScaleClickable = newIsScaleClickable;
        this.notify({
            type: 'UPDATE_IS-SCALE-CLICKABLE',
        });
    };
    ViewModel.prototype.getClientCoords = function () {
        return [this.data.clientX, this.data.clientY];
    };
    ViewModel.prototype.getModelProps = function () {
        return __assign({}, this.data.modelProps);
    };
    ViewModel.prototype.getActiveThumb = function () {
        return this.data.activeThumb;
    };
    ViewModel.prototype.getClasses = function () {
        return __assign({}, this.data.classes);
    };
    ViewModel.prototype.getLength = function () {
        return this.data.length;
    };
    ViewModel.prototype.getLengthInPx = function () {
        return this.data.lengthInPx;
    };
    ViewModel.prototype.getIsVertical = function () {
        return this.data.isVertical;
    };
    ViewModel.prototype.getHasTooltip = function () {
        return this.data.hasTooltip;
    };
    ViewModel.prototype.getHasValueInfo = function () {
        return this.data.hasValueInfo;
    };
    ViewModel.prototype.getHasScale = function () {
        return this.data.hasScale;
    };
    ViewModel.prototype.getScaleValue = function () {
        if (Array.isArray(this.data.scaleValue)) {
            return __spreadArrays(this.data.scaleValue);
        }
        return this.data.scaleValue;
    };
    ViewModel.prototype.getIsResponsive = function () {
        return this.data.isResponsive;
    };
    ViewModel.prototype.getUseKeyboard = function () {
        return this.data.useKeyboard;
    };
    ViewModel.prototype.getIsScaleClickable = function () {
        return this.data.isScaleClickable;
    };
    ViewModel.prototype.getValuePosition = function () {
        var valuePosition;
        if (isModelPropsValuesDefined_1.default(this.data.modelProps)) {
            var maxDiapason = this.data.modelProps.max - this.data.modelProps.min;
            var value = this.data.modelProps.value;
            if (this.data.lengthInPx !== undefined) {
                if (typeof value === 'number') {
                    valuePosition = (this.data.lengthInPx / maxDiapason)
                        * (value - this.data.modelProps.min);
                }
                else if (Array.isArray(value)) {
                    valuePosition = [
                        (this.data.lengthInPx / maxDiapason)
                            * (value[0] - this.data.modelProps.min),
                        (this.data.lengthInPx / maxDiapason)
                            * (value[1] - this.data.modelProps.min),
                    ];
                }
            }
        }
        return valuePosition;
    };
    // Получить длину шага
    ViewModel.prototype.getStepLength = function () {
        var length = this.getLengthInPx();
        if (length !== undefined) {
            if (isModelPropsValuesDefined_1.default(this.data.modelProps)) {
                var numOfSteps = (this.data.modelProps.max - this.data.modelProps.min)
                    / this.data.modelProps.stepSize;
                return length / numOfSteps;
            }
        }
        return undefined;
    };
    return ViewModel;
}(Subject_1.default));
exports.default = ViewModel;


/***/ }),

/***/ "./src/slider.ts":
/*!***********************!*\
  !*** ./src/slider.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Model_1 = __importDefault(__webpack_require__(/*! ./modules/Model/Model */ "./src/modules/Model/Model.ts"));
var View_1 = __importDefault(__webpack_require__(/*! ./modules/View/modules/View/View */ "./src/modules/View/modules/View/View.ts"));
var Presenter_1 = __importDefault(__webpack_require__(/*! ./modules/Presenter/Presenter */ "./src/modules/Presenter/Presenter.ts"));
(function initialization($) {
    var defaultOptions = {
        value: 0,
        isRange: false,
        stepSize: 1,
        min: 0,
        max: 10,
        length: '100%',
        hasTooltip: false,
        hasScale: false,
        scaleValue: 3,
        hasValueInfo: false,
        isVertical: false,
        isResponsive: false,
        useKeyboard: true,
        isScaleClickable: false,
    };
    // eslint-disable-next-line no-param-reassign
    $.fn.slider = function start(options, newOptions) {
        if (typeof options === 'object' || !options) {
            if (this.data('slider')) {
                $.error('Slider has already been called for this element');
            }
            return this.each(function init() {
                var settings = __assign(__assign({}, defaultOptions), options);
                var model = new Model_1.default(settings);
                var view = new View_1.default(settings, this);
                var presenter = new Presenter_1.default(model, view, settings);
                var slider = view.getElem('slider');
                if (slider) {
                    $(this).data('slider', slider);
                }
                else {
                    $(this).data('slider', false);
                }
                $(this).data('model', model);
                $(this).data('view', view);
                $(this).data('viewModel', view.getViewModel());
                $(this).data('presenter', presenter);
            });
        }
        if (options === 'changeOptions' && newOptions) {
            this.data('presenter').changeOptions(newOptions);
        }
        else if (options === 'value') {
            return this.data('model').getValue();
        }
        else if (options === 'model') {
            return this.data('model');
        }
        else if (options === 'view') {
            return this.data('view');
        }
        else if (options === 'viewModel') {
            return this.data('viewModel');
        }
        else if (options === 'presenter') {
            return this.data('presenter');
        }
        return this;
    };
}(jQuery));


/***/ }),

/***/ "./src/styles/_variables.scss":
/*!************************************!*\
  !*** ./src/styles/_variables.scss ***!
  \************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/styles/main.scss":
/*!******************************!*\
  !*** ./src/styles/main.scss ***!
  \******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/utils/areNumbersDefined.ts":
/*!****************************************!*\
  !*** ./src/utils/areNumbersDefined.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function areNumbersDefined(arr) {
    var isAllDefined = true;
    arr.forEach(function (num) {
        if (num === undefined) {
            isAllDefined = false;
        }
    });
    return isAllDefined;
}
exports.default = areNumbersDefined;


/***/ }),

/***/ "./src/utils/isModelPropsValuesDefined.ts":
/*!************************************************!*\
  !*** ./src/utils/isModelPropsValuesDefined.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function isModelPropsValuesDefined(modelProps) {
    var valueDefined = true;
    if (modelProps) {
        if (modelProps.value === undefined) {
            valueDefined = false;
        }
        else if (modelProps.isRange === undefined) {
            valueDefined = false;
        }
        else if (modelProps.stepSize === undefined) {
            valueDefined = false;
        }
        else if (modelProps.min === undefined) {
            valueDefined = false;
        }
        else if (modelProps.max === undefined) {
            valueDefined = false;
        }
    }
    else {
        valueDefined = false;
    }
    return valueDefined;
}
exports.default = isModelPropsValuesDefined;


/***/ })

/******/ });
//# sourceMappingURL=slider.min.js.map